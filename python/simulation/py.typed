from typing import (
    List, Dict, Optional, Union, TypeVar, Protocol,
    runtime_checkable, Tuple, Any, Sequence
)
import networkx as nx  # 如果需要使用 networkx 的类型

@runtime_checkable
class NetworkXProtocol(Protocol):
    """Type protocol for NetworkX wrapper class."""
    
    def __init__(self) -> None: ...
    
    def add_node(self, 
        node_id: int,
        pos: Tuple[float, float],
        **attr: Any
    ) -> None: ...
    
    def add_edge(self,
        source: int,
        target: int,
        **attr: Any
    ) -> None: ...
    
    def remove_node(self, node_id: int) -> None: ...
    
    def remove_edge(self, source: int, target: int) -> None: ...
    
    def get_node_attributes(self, node_id: int) -> Dict[str, Any]: ...
    
    def get_edge_attributes(self, source: int, target: int) -> Dict[str, Any]: ...
    
    def get_nodes(self) -> List[int]: ...
    
    def get_edges(self) -> List[Tuple[int, int]]: ...
    
    @property
    def graph(self) -> nx.Graph: ...